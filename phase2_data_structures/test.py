import os
import pandas as pd
# D√íNG S·ª¨A 1: Th√™m 'stock_listing' v√†o ƒë√¢y
from vnstock import Vnstock, stock_listing
from datetime import datetime, timedelta

# ===== PATH SETUP (Kh√¥ng ƒë·ªïi) =====
BASE_DIR = os.path.dirname(os.path.abspath(__file__)) if '__file__' in locals() else os.getcwd()
DATASET_DIR = os.path.join(BASE_DIR, "dataset")
os.makedirs(DATASET_DIR, exist_ok=True)


class Stock:
    """
    ƒê·∫°i di·ªán cho m·ªôt m√£ c·ªï phi·∫øu duy nh·∫•t.
    Class n√†y ch·ªãu tr√°ch nhi·ªám l·∫•y d·ªØ li·ªáu v√† t·ª± t√≠nh to√°n c√°c ch·ªâ s·ªë cho ch√≠nh n√≥.
    """
    def __init__(self, symbol):
        self.symbol = symbol
        self.data = pd.DataFrame()
        self.average_close = 0
        self.profit_pct = 0
        self.max_drawdown = 0
        self.volatility_pct = 0

    def __str__(self):
        """ƒê·ªãnh d·∫°ng c√°ch hi·ªÉn th·ªã ƒë·ªëi t∆∞·ª£ng Stock khi ƒë∆∞·ª£c print()"""
        if self.data.empty:
            return f"[{self.symbol}] - Ch∆∞a c√≥ d·ªØ li·ªáu."
        return (
            f"[{self.symbol}] L·ª£i nhu·∫≠n: {self.profit_pct:.2f}% | "
            f"Max Drawdown: {self.max_drawdown:.2f}% | "
            f"Bi·∫øn ƒë·ªông: {self.volatility_pct:.2f}%"
        )

    def fetch_data(self, start, end):
        """L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ gi√° v√† l∆∞u v√†o thu·ªôc t√≠nh 'data'."""
        try:
            print(f"   - ƒêang t·∫£i d·ªØ li·ªáu cho {self.symbol}...")
            # S·ª≠ d·ª•ng l·∫°i ƒë·ªëi t∆∞·ª£ng api ƒë·ªÉ tr√°nh kh·ªüi t·∫°o nhi·ªÅu l·∫ßn
            df = Vnstock().stock(symbol=self.symbol, source="VCI").quote.history(start=start, end=end, interval="1D")
            
            if df.empty:
                print(f"   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ {self.symbol} trong kho·∫£ng {start} -> {end}.")
                self.data = pd.DataFrame() # ƒê·∫£m b·∫£o data r·ªóng
                return False
            
            # L∆∞u file CSV
            file_path = os.path.join(DATASET_DIR, f"{self.symbol}_history.csv")
            df.to_csv(file_path, index=False, encoding="utf-8-sig")
            
            self.data = df
            return True
        except Exception as e:
            print(f"   ‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu cho {self.symbol}: {e}")
            self.data = pd.DataFrame() # ƒê·∫£m b·∫£o data r·ªóng
            return False

    def analyze(self):
        """Th·ª±c hi·ªán t·∫•t c·∫£ c√°c ph√©p t√≠nh ph√¢n t√≠ch cho c·ªï phi·∫øu n√†y."""
        if self.data.empty:
            print(f"   - B·ªè qua ph√¢n t√≠ch {self.symbol} do kh√¥ng c√≥ d·ªØ li·ªáu.")
            return

        self._calculate_basic_stats()
        self._calculate_max_drawdown()
        self._calculate_volatility()
        print(f"   ‚úì Ph√¢n t√≠ch {self.symbol} ho√†n t·∫•t.")

    def _calculate_basic_stats(self):
        self.average_close = self.data["close"].mean()
        first_price = self.data["close"].iloc[0]
        last_price = self.data["close"].iloc[-1]
        if first_price != 0:
            self.profit_pct = ((last_price - first_price) / first_price) * 100
        else:
            self.profit_pct = 0

    def _calculate_max_drawdown(self):
        prices = self.data["close"]
        peak = prices.iloc[0]
        max_dd = 0.0
        for p in prices:
            if p > peak:
                peak = p
            if peak != 0:
                dd = (p - peak) / peak * 100.0
                if dd < max_dd:
                    max_dd = dd
        self.max_drawdown = max_dd

    def _calculate_volatility(self):
        returns = self.data["close"].pct_change().dropna()
        if not returns.empty:
            self.volatility_pct = returns.std() * 100
        else:
            self.volatility_pct = 0

class PortfolioAnalyzer:
    """Qu·∫£n l√Ω v√† ph√¢n t√≠ch m·ªôt danh m·ª•c g·ªìm nhi·ªÅu ƒë·ªëi t∆∞·ª£ng Stock."""
    def __init__(self, symbols):
        # T·ª± ƒë·ªông lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† vi·∫øt hoa
        self.symbols = [s.strip().upper() for s in symbols if s.strip()]
        self.portfolio = [Stock(s) for s in self.symbols]
        print(f"ƒê√£ kh·ªüi t·∫°o danh m·ª•c v·ªõi c√°c m√£: {', '.join(self.symbols)}")

    def run_analysis(self, start, end):
        print(f"\nB·∫Øt ƒë·∫ßu qu√° tr√¨nh ph√¢n t√≠ch danh m·ª•c t·ª´ {start} ƒë·∫øn {end}...")
        for stock in self.portfolio:
            if stock.fetch_data(start, end):
                stock.analyze()
        print("--- Ph√¢n t√≠ch danh m·ª•c ho√†n t·∫•t ---\n")
    
    def display_results(self):
        print("--- K·∫æT QU·∫¢ PH√ÇN T√çCH DANH M·ª§C ---")
        for stock in self.portfolio:
            print(stock)
        print("------------------------------------")

    def get_best_performer(self):
        valid_stocks = [s for s in self.portfolio if not s.data.empty]
        if not valid_stocks: return None
        return max(valid_stocks, key=lambda stock: stock.profit_pct)

    def filter_potential_stocks(self, min_profit, max_dd, max_volatility):
        return [s for s in self.portfolio if not s.data.empty and s.profit_pct >= min_profit and s.max_drawdown >= max_dd and s.volatility_pct <= max_volatility]

# ===== C√ÅC H√ÄM TI·ªÜN √çCH CHO MENU =====

def display_menu():
    """Hi·ªÉn th·ªã menu cho ng∆∞·ªùi d√πng."""
    print("\n===== MENU PH√ÇN T√çCH C·ªî PHI·∫æU =====")
    print("1. Xem danh s√°ch m√£ c·ªï phi·∫øu (HOSE)")
    print("2. Ph√¢n t√≠ch danh m·ª•c")
    print("3. T√¨m c·ªï phi·∫øu tƒÉng tr∆∞·ªüng t·ªët nh·∫•t")
    print("4. L·ªçc c·ªï phi·∫øu ti·ªÅm nƒÉng")
    print("5. Tho√°t")
    print("=====================================")

def get_date_range():
    """H·ªèi ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ kho·∫£ng th·ªùi gian ph√¢n t√≠ch."""
    print("\n--- Vui l√≤ng ch·ªçn kho·∫£ng th·ªùi gian ph√¢n t√≠ch ---")
    end_date_default = datetime.now().strftime('%Y-%m-%d')
    start_date_default = (datetime.now() - timedelta(days=365)).strftime('%Y-%m-%d')
    
    start = input(f"Nh·∫≠p ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD) [m·∫∑c ƒë·ªãnh: {start_date_default}]: ") or start_date_default
    end = input(f"Nh·∫≠p ng√†y k·∫øt th√∫c (YYYY-MM-DD) [m·∫∑c ƒë·ªãnh: {end_date_default}]: ") or end_date_default
    
    return start, end

def show_listed_companies():
    """Hi·ªÉn th·ªã 100 m√£ c·ªï phi·∫øu ƒë·∫ßu ti√™n tr√™n s√†n HOSE."""
    try:
        print("\nƒêang t·∫£i danh s√°ch c√°c m√£ ni√™m y·∫øt...")
        # D√íNG S·ª¨A 2: Thay ƒë·ªïi c√°ch g·ªçi h√†m t·∫°i ƒë√¢y
        df = stock_listing() 
        print("--- 100 M√É C·ªî PHI·∫æU ƒê·∫¶U TI√äN TR√äN S√ÄN HOSE ---")
        # 'comGroupCode' ƒë√£ ƒë∆∞·ª£c ƒë·ªïi t√™n th√†nh 'exchange' trong c√°c phi√™n b·∫£n m·ªõi
        hose_stocks = df[df['exchange'] == 'HOSE'][['ticker', 'company_name']].head(100)
        # S·ª≠ d·ª•ng to_string ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n trong console
        print(hose_stocks.to_string(index=False))
        print("-------------------------------------------------")
    except Exception as e:
        print(f"L·ªói khi t·∫£i danh s√°ch c√¥ng ty: {e}")

# ===== MAIN: V√≤ng l·∫∑p ch√≠nh c·ªßa ch∆∞∆°ng tr√¨nh =====
if __name__ == "__main__":
    analyzer = None

    while True:
        display_menu()
        choice = input("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ")

        if choice == '1':
            show_listed_companies()

        elif choice == '2':
            symbols_input = input("\nNh·∫≠p c√°c m√£ c·ªï phi·∫øu mu·ªën ph√¢n t√≠ch, c√°ch nhau b·∫±ng d·∫•u ph·∫©y (VD: FPT,VCB,MBB): ")
            if not symbols_input.strip():
                print("‚ö†Ô∏è Danh s√°ch m√£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                continue
            
            symbols = symbols_input.split(',')
            start_date, end_date = get_date_range()
            analyzer = PortfolioAnalyzer(symbols)
            analyzer.run_analysis(start=start_date, end=end_date)
            analyzer.display_results()

        elif choice == '3':
            if not analyzer:
                print("‚ö†Ô∏è Vui l√≤ng ch·∫°y 'Ph√¢n t√≠ch danh m·ª•c' (l·ª±a ch·ªçn 2) tr∆∞·ªõc.")
                continue
            
            start_date, end_date = get_date_range()
            analyzer.run_analysis(start=start_date, end=end_date) # Ph√¢n t√≠ch l·∫°i v·ªõi ng√†y m·ªõi
            
            best_stock = analyzer.get_best_performer()
            if best_stock:
                print(f"\nüî• Trong kho·∫£ng {start_date} -> {end_date}, c·ªï phi·∫øu tƒÉng tr∆∞·ªüng t·ªët nh·∫•t l√†:")
                print(best_stock)
            else:
                print("Kh√¥ng c√≥ c·ªï phi·∫øu n√†o h·ª£p l·ªá ƒë·ªÉ t√¨m ki·∫øm.")

        elif choice == '4':
            if not analyzer:
                print("‚ö†Ô∏è Vui l√≤ng ch·∫°y 'Ph√¢n t√≠ch danh m·ª•c' (l·ª±a ch·ªçn 2) tr∆∞·ªõc.")
                continue

            start_date, end_date = get_date_range()
            analyzer.run_analysis(start=start_date, end=end_date) # Ph√¢n t√≠ch l·∫°i v·ªõi ng√†y m·ªõi
            
            try:
                print("\n--- Nh·∫≠p ti√™u ch√≠ ƒë·ªÉ l·ªçc c·ªï phi·∫øu ---")
                min_p = float(input("L·ª£i nhu·∫≠n t·ªëi thi·ªÉu (%): "))
                max_d = float(input("S·ª•t gi·∫£m t·ªëi ƒëa ch·∫•p nh·∫≠n ƒë∆∞·ª£c (%, nh·∫≠p s·ªë √¢m, VD: -15): "))
                max_v = float(input("ƒê·ªô bi·∫øn ƒë·ªông t·ªëi ƒëa (%): "))
                
                top_stocks = analyzer.filter_potential_stocks(min_p, max_d, max_v)
                
                if top_stocks:
                    print(f"\nüíé Trong kho·∫£ng {start_date} -> {end_date}, c√°c c·ªï phi·∫øu ti·ªÅm nƒÉng t√¨m th·∫•y:")
                    for stock in top_stocks:
                        print(f" - {stock}")
                else:
                    print("\nKh√¥ng t√¨m th·∫•y c·ªï phi·∫øu n√†o th·ªèa m√£n ti√™u ch√≠.")
            except ValueError:
                print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng s·ªë.")

        elif choice == '5':
            print("üëã T·∫°m bi·ªát!")
            break
        else:
            print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p l·∫°i.")